#!/usr/bin/perl
use warnings;
use strict;
use feature 'state';
use URI;
use YAML();
use Data::Dumper;
use File::Basename;
use File::Path qw(make_path);

my $etc_dir          = 'etc/stream-services';
my $templates_dir    = $etc_dir . '/templates';
my $ls_templates_dir = $templates_dir . '/liquidsoap';
my $ic_templates_dir = $templates_dir . '/icecast';
my $instances_dir    = "instances";

sub load_file {
    my $file = shift;
    open my $fh, '<', $file;
    my $content = '';
    while ( my $line = <$fh> ) { $content .= $line }
    return $content;
}

sub save_file {
    my ( $file, $content ) = @_;
    my $dir = dirname($file);
    make_path $dir or die "cannot mkdir $dir, $!" unless -d $dir;
    print "save $file\n";
    open my $fh, '>', $file or die "cannot write $file\n";
    print $fh $content;
    close $fh;
}

sub parse_url {
    my $uri = shift;
    return unless $uri;
    my $s = "[^:\@/]+";
    if ( $uri =~ m!($s)?(:$s)(\@$s)(:[0-9]+)(/$s)! ) {
        my $val = {};
        $val->{user}  = $1 if $1;
        $val->{password}  = $2 if $2;
        $val->{host}  = $3 if $3;
        $val->{port}  = $4 if $4;
        $val->{mount} = $5 if $5;
        $val->{password} =~ s{^\:}{};
        $val->{port} =~ s{^\:}{};
        $val->{host} =~ s{^\@}{};
        return $val;
    }
    return $uri;
}

sub generate_icecast_conf {
    my ( $service, $values ) = @_;

    my $config = load_file("$ic_templates_dir/icecast.conf");
    for my $key ( sort { length $a <=> length $b } keys %$values ) {
        my $value = $values->{$key};
        $config =~ s/<$key>/$value/g;
    }
    save_file "$instances_dir/etc/icecast/$service.conf", $config;
}

sub set_ls_values {
    my ( $service, $name, $values ) = @_;

    my $path = "$ls_templates_dir/$name.conf";
    die qq{unknown step "$name" in "$path.conf": template "$name.conf" does not exist\n}
      unless -e $path;
    my $template = load_file($path);
    $values->{"service"} = $service if $name eq 'init';
    state $defaults = YAML::LoadFile("$ls_templates_dir/defaults.conf");
    for my $key ( keys %$defaults ) {
        my ( $step, $var ) = split /\./, $key, 2;
        next unless $var;
        next unless $step =~ /^$name/;
        $values->{$var} //= $defaults->{$key};
    }

    for my $key ( sort { length $a <=> length $b } keys %$values ) {
        my $value = $values->{$key};
        if ( $key =~ /url/ ) {
            my $url_fields = parse_url($value);
            if ( $name =~ /^output-icecast-/ and ref($url_fields) eq 'HASH' ) {
                generate_icecast_conf( $service, $url_fields );
            }
            $value = ref($url_fields) eq 'HASH'
              ? ( join ", ",
                map {
                    my $key = $_;
                    my $val = $url_fields->{$key};
                    if ($val =~/^\d+$/){
                        qq{$key=$val}
                    } else {
                        qq{$key="$val"}
                    }
                } sort keys %$url_fields )
              : $url_fields;
        }
        $template =~ s/<$name.$key>/$value/g;
    }
    return $template;
}

sub deploy_liquidsoap_conf {
    my ( $service, $conf ) = @_;
    my $steps = $conf->{flow};
    die "liquidsoap: missing steps" unless @$steps;

    my $config = '';
    for my $step (@$steps) {
        $step = { $step => {} } if ref($step) ne 'HASH';
        my ($name) = keys %$step;
        my $values = [ values %$step ]->[0];
        $values = { $name => $values } if ref($values) ne 'HASH';
        $values = {} unless $values;
        $config .= "#$name\n" . set_ls_values( $service, $name, $values ) . "\n";
    }
    save_file "$instances_dir/etc/stream-services/$service.liq", $config;
}

sub deploy_liquidsoap_service {
    my ( $service, $conf ) = @_;
    my $template = load_file($templates_dir . '/systemd/system/liquidsoap.service');
    state $defaults = YAML::LoadFile("$ls_templates_dir/defaults.conf");
    $conf->{name} = $service;
    for my $key ( keys %$defaults ) {
        my ( $step, $var ) = split /\./, $key, 2;
        next unless $var;
        next unless $step =~ /^service/;
        $conf->{$var} //= $defaults->{$key};
    }
    for my $key ( sort { length $a <=> length $b } keys %$conf ) {
        my $value = $conf->{$key};
        $template =~ s/<$key>/$value/g;
    }
    save_file "$instances_dir/etc/systemd/system/$service.service", $template;
}

sub deploy {
    my ( $service, $config ) = @_;
    make_path $instances_dir or die "cannot create $instances_dir, $!" unless -d $instances_dir;
    deploy_liquidsoap_conf( $service, $config->{liquidsoap} ) if $config->{liquidsoap};
    deploy_liquidsoap_service( $service, $config->{liquidsoap}->{service} ) if $config->{liquidsoap}->{service};
}

for my $file ( glob("$etc_dir/services/*.conf") ) {
    my ($service) = $file =~ m!/([^/]+)\.conf!;
    print "\nprocess $file\n";
    deploy( $service, YAML::LoadFile($file) );
}
